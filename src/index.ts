import { app, BrowserWindow, ipcMain } from 'electron';
import path from 'path';
import sqlite3 from 'sqlite3';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.maximize();
  mainWindow.setMenuBarVisibility(false);


  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const sqlite = sqlite3.verbose();
const dbPath = path.join(app.getPath("documents"), 'voc.db');
const database = new sqlite.Database(dbPath, (err) => {
  if (err) console.error('Database opening error: ', err);
});

const PAGE_SIZE = 10;

const getData = async (page: number) => {
  return new Promise((resolve, reject) => {
    database.all(`
      select * from vocabulary join vocabulary_info as info
      on info.vocabulary_id = vocabulary.id order by page LIMIT ${PAGE_SIZE} offset ${PAGE_SIZE * page}
    `, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
};

const search = async (keyword: string) => {
  return new Promise((resolve, reject) => {
    database.all(`
      select * from vocabulary join vocabulary_info as info
      on info.vocabulary_id = vocabulary.id
      where vocabulary.vocabulary like '${keyword}%'
      order by page
    `, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
};

ipcMain.on('getData', async (event, arg) => {
  const page = arg?.page ?? 0;
  const data = await getData(page);
  event.reply('getData', data);
});

ipcMain.on('search', async (event, arg) => {
  const keyword = arg?.keyword ?? '';
  const data = await search(keyword);
  event.reply('searchResult', data);
});

ipcMain.on('create', async (event, arg) => {
  console.log(arg);
  event.reply('searchResult', []);
});
