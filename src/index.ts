import { app, BrowserWindow, ipcMain } from 'electron';
import path from 'path';
import sqlite3 from 'sqlite3';
import {
  Vocabulary,
  CreateVocabDto,
  VocabularyInfo,
} from './Utils/interface';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.maximize();
  mainWindow.setMenuBarVisibility(false);


  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const sqlite = sqlite3.verbose();
const dbPath = path.join(app.getPath("documents"), 'voc.db');
const database = new sqlite.Database(dbPath, (err) => {
  if (err) console.error('Database opening error: ', err);
});

const PAGE_SIZE = 10;

const getData = async (page: number) => {
  return new Promise((resolve, reject) => {
    database.all(`
      select * from vocabulary join vocabulary_info as info
      on info.vocabulary_id = vocabulary.id order by page LIMIT ${PAGE_SIZE} offset ${PAGE_SIZE * page}
    `, (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
};

const getDataById = async (id: number) => new Promise<VocabularyInfo & Vocabulary>(
  (resolve) => database.all( `
    select * from vocabulary
    join vocabulary_info as info on info.vocabulary_id = vocabulary.id
    where vocabulary.id = ${id}
  `,
  (err, rows) => err ? console.log(err) : resolve(rows[0]),
));

const search = async (keyword: string) => {
  return new Promise<any[]>((resolve) => {
    database.all(`
      select * from vocabulary join vocabulary_info as info
      on info.vocabulary_id = vocabulary.id
      where vocabulary.vocabulary like "${keyword}%"
      order by page
    `, (err, rows) => {
      if (err) console.log(err);
      else resolve(rows);
    });
  });
};

const getVocabFromTibetan = (tibetan: string) => new Promise<Vocabulary[]>(
  (resolve) => database.all(
    `Select * from vocabulary where vocabulary="${tibetan}"`,
    (err, rows) => {
      if (err) console.log(err);
      else resolve(rows);
    },
  ));

const updateVocab = (id: number, page: number) => new Promise<void>(
  (resolve) => database.exec(
    `UPDATE vocabulary SET page=${page} WHERE id=${id}`,
    (err) => err ? console.log(err) : resolve(),
));

const createVocab = (tibetan: string, page: number | null) => new Promise<number>(
  (resolve) => {
    const sql = `INSERT INTO vocabulary (vocabulary${page ? ", page" : ""}) VALUES ("${tibetan}"${page? `, ${page}` : ''})`;
    database.exec(sql,
      async (err) => err ? console.log(err) : resolve((await getVocabFromTibetan(tibetan))[0].id)
    );
  });

const InsertIntoVocabulary = async (tibetan: string, page: number) => {
  const existingVocab = await getVocabFromTibetan(tibetan);
  if (existingVocab.length) {
    if (page) await updateVocab(page, existingVocab[0].id);
    return existingVocab[0].id;
  }
  else {
    const insertId = await createVocab(tibetan, page);
    return insertId;
  }
};

const InsertIntoInfo = async (vocabId: number, data: Record<string, any>) => {
  const insertData: Record<string, any> = {
    ...data,
    vocabulary_id: vocabId,
  };
  const validKeys = Object.keys(insertData).filter((key) => !!insertData[key]);
  const validValues = validKeys.map((key) => insertData[key]);

  return new Promise<void>((resolve) => {
    const sql = `
    INSERT INTO vocabulary_info (${validKeys.join(',')}) VALUES
    (${
      validValues
      .map(x => typeof x === 'string' ? `"${x}"` : x)
      .join(',')
    })`;
    database.all(sql, (err) => err ? console.log(err) : resolve());
  });
};

ipcMain.on('getData', async (event, arg) => {
  const page = arg?.page ?? 0;
  const data = await getData(page);
  event.reply('getData', data);
});

ipcMain.on('search', async (event, arg) => {
  const keyword = arg?.keyword ?? '';
  const data = await search(keyword);
  event.reply('searchResult', data);
});

ipcMain.on('create', async (event, arg) => {
  const { tibetan, past, future, imperative, page, ...rest } = (arg.data as CreateVocabDto);
  try {
    const vocabId = await InsertIntoVocabulary(tibetan, page);
    const parseKeys = ['past', 'future', 'imperative'];
    const postfix = ['(過去)', '(未來)', '(命令)'];
    const { translation } = rest;
    const temp = await (
      [past, future, imperative]
      .reduce(async (p, item, i) => p.then((prev) => new Promise(async (resolve) => {
        if (item?.vocabulary) {
          const id = await InsertIntoVocabulary(item.vocabulary, item.page);
          const data = {
            link: vocabId,
            translation: translation + ` ${postfix[i]} `,
            part_of_speech_id: 1,
          };
          await InsertIntoInfo(id, data);
          resolve([...prev, id]);
        }
        return resolve([...prev, null]);
    })), Promise.resolve<number[]>([])));

    const indices = temp.reduce((acc, curr, i) => ({
        ...acc,
        [parseKeys[i]]: curr ?? null,
    }), {});

    await InsertIntoInfo(vocabId, {
      ...rest,
      ...indices,
    });

    const data = await getDataById(vocabId);
    const result = [data];
    if (data.past) result.push(await getDataById(data.past));
    if (data.future) result.push(await getDataById(data.future));
    if (data.imperative) result.push(await getDataById(data.imperative));
    if (data.link) result.push(await getDataById(data.link));

    event.reply('insertResult', result);
  } catch(err) {
    console.log(err);
  }
});
